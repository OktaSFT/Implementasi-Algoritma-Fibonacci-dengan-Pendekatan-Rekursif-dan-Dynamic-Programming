#include <iostream>
#include <chrono>
#include <vector>
using namespace std;

long long fibonacciRecursive(long long n) {
    if (n <= 1) {
        return n;
    }
    return fibonacciRecursive(n - 1) + fibonacciRecursive(n - 2);
}

long long fibonacciDP(long long n) {
    if (n <= 1) {
        return n;
    }
    vector<long long> fib(n + 1);
    fib[0] = 0;
    fib[1] = 1;
    for (long long i = 2; i <= n; i++) {
        fib[i] = fib[i - 1] + fib[i - 2];
    }
    return fib[n];
}

template <typename Func>
void measureExecutionTime(Func func, long long n, const std::string& name) {
    auto start = std::chrono::high_resolution_clock::now();
    long long result = func(n);
    auto end = std::chrono::high_resolution_clock::now();
    std::chrono::duration<double, std::micro> duration = end - start;
    std::cout << name << " untuk n=" << n << " memerlukan waktu " << duration.count() << " microseconds" << std::endl;
    std::cout << "Result: " << result << std::endl;
}

int main() {
    long long arr[] = {10, 25, 30, 40, 50};
    for (int i = 0; i < sizeof(arr) / sizeof(arr[0]); i++) {
        long long n = arr[i];
        cout << "n = " << n << endl;
        
        measureExecutionTime(&fibonacciRecursive, n, "Fibonacci Recursif");
        measureExecutionTime(&fibonacciDP, n, "Fibonacci Dynamic Programming");
        cout << endl;
    }
    return 0;
}
